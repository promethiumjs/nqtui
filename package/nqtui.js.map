{"mappings":"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","sources":["src/nqtui.js","src/Component.js"],"sourcesContent":["import Component from \"./Component.js\";\nimport { html } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { guard } from \"lit-html/directives/guard.js\";\nimport { cache } from \"lit-html/directives/cache.js\";\nimport { repeat } from \"lit-html/directives/repeat.js\";\nimport { live } from \"lit-html/directives/live.js\";\nimport { ifDefined } from \"lit-html/directives/if-defined.js\";\nimport { ref } from \"lit-html/directives/ref.js\";\nimport { until } from \"lit-html/directives/until.js\";\n\nexport {\n  Component,\n  html,\n  classMap,\n  styleMap,\n  guard,\n  cache,\n  repeat,\n  live,\n  ifDefined,\n  ref,\n  until,\n};\n","import { render } from \"lit-html\";\n//@ts-check\n\n/**\n * The Component Class.\n * @typedef Component\n * @type {object}\n * @property {object} state - An object that represents that state of your component.\n * @property {object} events - An object that represents that represents the events your component\n * is listening for.\n * @property {object} children - An object that represents that children of your component(these are usually other\n * components).\n * @property {object} props - An object that represents properties that have been passed down to your component\n * from it's parent.\n */\n\n/**\n * The Component Class.\n */\nexport default class Component {\n  constructor(props) {\n    this.events = {};\n    this.children = {};\n    this.props = props || {};\n    this.$ = this.content;\n    this.updateChildNodes = true;\n  }\n\n  /**\n   * Create a new component using the expression \"Component.create()\".\n   * @param {class} ClassName - The class that you want your component to extend(The provided\n   * class should be one that extends the Component class). This argument is required.\n   * @param {object} props - An object of properties that will be set as your component's props object.\n   * @return {Component} The newly created component.\n   */\n  static create(ClassName, props) {\n    let component = new ClassName(props);\n\n    //if (component.addStaticChildNodes) {\n    //const $ = component.addChild.bind(component);\n    //const $s = component.addToChildren.bind(component);\n    //component.addStaticChildNodes($, $s);\n    //}\n\n    return component;\n  }\n\n  /**\n   * Create a new root component from an existing object using the expression \"Component.createInstanceFromObject()\".\n   * @param {class} ClassName - The class that you want your component to extend(The provided\n   * class should be one that extends the Component class). This argument is required.\n   * @param {object} props - An object of properties that will be set as your component's props object.\n   * This argument is also required, with a property of renderContainer. The value of the renderContainer\n   * property should be the DOM element under which the component will be rendered(it's parent).\n   * @return {Component} The newly created component.\n   */\n  static createInstanceFromObject(ClassName, object, props) {\n    let component = Object.assign(new ClassName(props), object);\n\n    return component;\n  }\n\n  /**\n   * Create a new root component using the expression \"Component.createRoot()\".\n   * @param {class} ClassName - The class that you want your component to extend(The provided\n   * class should be one that extends the Component class). This argument is required.\n   * @param {object} props - An object of properties that will be set as your component's props object.\n   * This argument is also required, with a property of renderContainer. The value of the renderContainer\n   * property should be the DOM element under which the component will be rendered(it's parent).\n   * @return {Component} The newly created component.\n   */\n  static createRoot(ClassName, props) {\n    let component = new ClassName(props);\n\n    if (\n      typeof component.props.renderContainer === \"string\" ||\n      component.props.renderContainer instanceof String\n    )\n      component.props.renderContainer = document.querySelector(\n        component.props.renderContainer\n      );\n\n    component.addEvent(\n      \"renderRoot\",\n      component.render.bind(\n        component,\n        component.props.renderContainer,\n        component.props.renderOptions\n      )\n    );\n\n    //if (component.addStaticChildNodes) {\n    //const $ = component.addChild.bind(component);\n    //const $s = component.addToChildren.bind(component);\n    //component.addStaticChildNodes($, $s);\n    //}\n\n    return component;\n  }\n\n  /**\n   * Add a single child component to your component.\n   * @param {class} ClassName - The class type of which you want the child component to be.\n   * @param {string} nodeName - The property name with which you would like to reference the child component.\n   * @param {object} [props] - An object of properties that will be set as the child component's props object.\n   * @return {Component} The newly added child component.\n   */\n  addChild(ClassName, nodeName, props) {\n    this.children[nodeName] = new ClassName(props);\n\n    if (this.events.hasOwnProperty(\"renderRoot\")) {\n      this.children[nodeName].addEvent(\"renderRoot\", this.events.renderRoot[0]);\n    }\n\n    //if (this.children[nodeName].addStaticChildNodes) {\n    //const $ = this.children[nodeName].addChild.bind(this.children[nodeName]);\n    //const $s = this.children[nodeName].addToChildren.bind(\n    //this.children[nodeName]\n    //);\n    //this.children[nodeName].addStaticChildNodes($, $s);\n    //}\n\n    return this.children[nodeName];\n  }\n\n  addProps(props) {\n    Object.assign(this.props, props);\n\n    return this;\n  }\n\n  /**\n   * Update the state of your component.\n   * @param {Object} state - An object that represents the state to be added to your component. New properties will\n   * be added to your component's state object and existing properties will be used to update the corresponding values\n   * on your component's state object.\n   * @param {string} events - Events to be emmitted on your component.\n   * @param {object} [eventObject] - Arguments to be passed to the event callback.\n   * @return {Component} Returns the component whose state was updated.\n   */\n  addState(state, events, eventObject) {\n    Object.assign(this.state, state);\n\n    this.update(events, eventObject);\n\n    return this;\n  }\n\n  /**\n   * Add a single child component to your component's children array containing children of the same type.\n   * @param {class} ClassName - The class type of which you want the child component to be.\n   * @param {string} nodeName - The property name that is currently being used to reference the array of chilren. If property\n   * doesn't exist, it will be initialized with an empty array before the new child component is added.\n   * @param {object} [props] - An object of properties that will be set as the child component's props object.\n   * @return {Component} The newly added child component.\n   */\n  addToChildren(ClassName, nodeListName, props) {\n    let child = new ClassName(props);\n\n    if (!this.children[nodeListName]) {\n      this.children[nodeListName] = [];\n    }\n\n    this.children[nodeListName].push(child);\n\n    if (this.events.hasOwnProperty(\"renderRoot\")) {\n      child.addEvent(\"renderRoot\", this.events.renderRoot[0]);\n    }\n\n    //if (child.addStaticChildNodes) {\n    //const $ = child.addChild.bind(child);\n    //const $s = child.addToChildren.bind(child);\n    //child.addStaticChildNodes($, $s);\n    //}\n\n    return child;\n  }\n\n  clone() {\n    //let clone = new Component();\n    //let decoy = JSON.parse(JSON.stringify(this));\n    //clone = Object.assign(clone, decoy);\n\n    //return clone\n    return Object.create(this);\n  }\n\n  /**\n   * Update your component's template and return it.\n   * @param {object} [props] - An object of properties that will used to update component's props object. New properties will\n   * be added to the component's props object and existing properties will be used to update the corresponding values\n   * on your component's props object.\n   * @return {TemplateResult} A lit-html TemplateResult object representing your component's template.\n   */\n  content(props) {\n    if (props) this.addProps(props);\n\n    if (this.addChildNodes && this.updateChildNodes) {\n      this.children = {};\n\n      const $ = this.addChild.bind(this);\n      const $s = this.addToChildren.bind(this);\n\n      this.addChildNodes($, $s);\n      this.updateChildNodes = false;\n    }\n\n    const $ = this.children;\n\n    return this.template($);\n  }\n\n  /**\n   * Emit an event on your component.\n   * @param {string} eventName - A string representing the event type to be emitted.\n   * @param {object} eventObject - An object containing properties to be used by event callbacks.\n   * @return {Component}  Your component.\n   */\n  emitEvent(eventName, eventObject) {\n    if (this.events[eventName])\n      this.events[eventName].forEach((fn) => fn(eventObject));\n\n    return this;\n  }\n\n  render(container, renderOptions) {\n    if (renderOptions) {\n      render(this.content(), container, renderOptions);\n    } else {\n      render(this.content(), container);\n    }\n\n    return this;\n  }\n\n  /**\n   * This represents an event callback\n   * @callback Component~eventCallback\n   * @param {object} eventObject - An object containing properties to be used by event callback.\n   */\n\n  /**\n   * Subcribe to an event on your component.\n   * @param {string} eventName - A string representing the event type to be subscribed to. Event type will be create if it doesn't\n   * already exist.\n   * @param {Component~eventCallback} callback - Callback function to be called when the event is emitted.\n   */\n  addEvent(eventName, callback) {\n    if (this.events[eventName]) {\n      this.events[eventName].push(callback);\n    } else {\n      this.events[eventName] = [];\n      this.events[eventName].push(callback);\n    }\n\n    return {\n      remove: () =>\n        this.events[eventName] &&\n        this.events[eventName].splice(\n          this.events[eventName].indexOf(callback) >>> 0,\n          1\n        ),\n    };\n  }\n\n  update(events, eventObject) {\n    this.updateChildNodes = true;\n    if (events) events.forEach((event) => this.emitEvent(event, eventObject));\n  }\n}\n"],"names":[],"version":3,"file":"nqtui.js.map","sourceRoot":"/"}